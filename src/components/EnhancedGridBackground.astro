---
interface Props {
  gridSize?: number;
  gridColor?: string;
  gridLineThickness?: number;
  backgroundColor?: string;
  // Animation controls
  enableAnimation?: boolean;
  animationSpeed?: number;      // 1-10 scale (1=very slow, 10=very fast)
}

const {
  gridSize = 50,
  gridColor = "rgba(100, 100, 100, 0.4)",
  gridLineThickness = 1,
  backgroundColor = "#0a0a0a",
  // Animation
  enableAnimation = true,
  animationSpeed = 5,          // Medium speed by default
} = Astro.props;

// Convert speed (1-10) to duration in seconds (100s to 10s)
const animationDuration = 110 - (animationSpeed * 10);
---

<div class="grid-background">
  <div class="grid-overlay"></div>
  <div class="gradient-overlay"></div>
</div>

<style define:vars={{
  gridSize: `${gridSize}px`,
  gridColor,
  gridLineThickness: `${gridLineThickness}px`,
  backgroundColor,
  animationDuration: `${animationDuration}s`,
}}>
  .grid-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    background-color: var(--backgroundColor);
    overflow: hidden;
  }

  .grid-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: 
      linear-gradient(to right, var(--gridColor) var(--gridLineThickness), transparent var(--gridLineThickness)),
      linear-gradient(to bottom, var(--gridColor) var(--gridLineThickness), transparent var(--gridLineThickness));
    background-size: var(--gridSize) var(--gridSize);
    background-position: center center;
    opacity: 0.8;
  }

  .gradient-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      to bottom,
      rgba(10, 10, 10, 0) 0%,
      rgba(10, 10, 10, 0.4) 40%,
      rgba(10, 10, 10, 0.7) 70%,
      rgba(10, 10, 10, 0.9) 100%
    );
    pointer-events: none;
  }

  /* Animation for the grid movement */
  @keyframes gridFloatAnimation {
    0% {
      background-position: 0px 0px;
    }
    100% {
      background-position: calc(var(--gridSize) * 2) calc(var(--gridSize) * 2);
    }
  }
</style>

{enableAnimation && (
  <style is:global>
    .grid-overlay {
      animation: gridFloatAnimation var(--animationDuration) linear infinite !important;
    }
  </style>
)}