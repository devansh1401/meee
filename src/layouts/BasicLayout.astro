---
// src/layouts/BasicLayout.astro
import EnhancedGridBackground from '../components/EnhancedGridBackground.astro';
import { LINKS } from "../lib/constants";


interface Props {
  title: string;
  description: string;
  page?: "travel" | "blog";
  slug?: string | undefined;
  pubDate?: Date | string;
}

const { title, description, page, slug, pubDate } = Astro.props;
// Convert pubDate to ISO string if it's a Date object
const pubDateString = pubDate instanceof Date ? pubDate.toISOString() : pubDate;
const image =
  page === "travel"
    ? `${Astro.url.origin}/globe_preview.webp`
    : `${Astro.url.origin}/devansh.webp`;

const schema =
  page !== "blog"
    ? {
        "@context": "http://schema.org",
        "@type": "Person",
        name: "Devansh",
        url: Astro.url.origin,
        sameAs: [LINKS.linkedin, LINKS.github],
        image: `${Astro.url.origin}/devansh.webp`,
        jobTitle: "Freelance Frontend Developer",
        worksFor: {
          "@type": "Organization",
          name: "Self-Employed",
          address: {
            "@type": "PostalAddress",
            addressLocality: "India",
            addressCountry: "IT",
          },
        },
        nationality: {
          "@type": "Country",
          name: "India",
        },
      }
    : {
        "@context": "http://schema.org",
        "@type": "BlogPosting",
        mainEntityOfPage: {
          "@type": "WebPage",
          "@id": `${Astro.url.origin}/blog/${slug}`,
        },
        headline: title || title,
        description: description || title,
        image: `${Astro.url.origin}/devansh.webp`, //TODO: dynamic
        author: {
          "@type": "Person",
          name: "Devansh",
          url: Astro.url.origin,
          sameAs: [LINKS.linkedin, LINKS.github],
        },
        publisher: {
          "@type": "Organization",
          name: "Devansh",
          logo: {
            "@type": "ImageObject",
            url: `${Astro.url.origin}/devansh.webp`,
          },
        },
        datePublished: pubDateString,
        dateModified: pubDateString,
      };
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/x-icon" href="/devansh.webp" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="robots" content="index, follow" />
    <!-- Basic OG tags for sharing your website's content on platforms like Facebook and LinkedIn -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url.origin} />
    <meta
      property="og:image"
      content={image || `${Astro.url.origin}/devansh.webp`}
    />
    <!-- Basic Twitter Card tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta
      name="twitter:image"
      content={image || `${Astro.url.origin}/devansh.webp`}
    />
  <!-- RSS feed link -->
  <link rel="alternate" type="application/rss+xml" title="Devansh Kukreja's Blog" href="/rss.xml" />
    <link rel="preconnect" href="https://cdn.fontshare.com" />
    {
      page === "travel" && (
        <link rel="canonical" href={`${Astro.url.origin}/travel`} />
      )
    }
    {
      page === "blog" && (
        <link rel="canonical" href={`${Astro.url.origin}/blog/${slug}`} />
      )
    }
    <!-- Fix Twitter script with proper TypeScript support -->
    <script define:vars={{ title }}>
      // TypeScript declarations for client-side
      if (typeof window !== 'undefined') {
        // Initialize Twitter widget
        window.twttr = (function(d, s, id) {
          var js, fjs = d.getElementsByTagName(s)[0],
            t = window.twttr || {};
          if (d.getElementById(id)) return t;
          js = d.createElement(s);
          js.id = id;
          js.src = "https://platform.twitter.com/widgets.js";
          // Fix the null check here
          if (fjs && fjs.parentNode) {
            fjs.parentNode.insertBefore(js, fjs);
          } else {
            d.head.appendChild(js);
          }
          t._e = [];
          t.ready = function(f) {
            t._e.push(f);
          };
          return t;
        }(document, "script", "twitter-wjs"));
        
        // Wait for twttr to be ready
        if (window.twttr) {
          window.twttr.ready(function() {
            window.twttr.widgets.load();
            window.twttr.events.bind('rendered', function(e) {
              // Set theme to dark (safely accessing properties)
              if (e && e.target && e.target.contentDocument) {
                e.target.contentDocument.documentElement.classList.add('dark');
              }
            });
          });
        }
      }
    </script>
    <script type="application/ld+json" set:html={JSON.stringify(schema)} />
  </head>
  <body
    class="bg-darkslate-700 md:h-screen flex flex-col justify-center items-center"
  >
  <!-- Add the SimplifiedGridBackground component here -->
  <EnhancedGridBackground
    gridSize={90}
    gridColor="rgba(100, 100, 100, 0.4)"
    gridLineThickness={1}
    backgroundColor="#0a0a0a"
    enableAnimation={true}
    animationSpeed={8}
  />  
  <slot name="loader" />
    <slot />
  </body>
</html>

<!-- Add this to your existing <style is:global> section in BasicLayout.astro -->
<style is:global>
  /* Twitter Card Styling */
  :root {
    --tc-padding: 0; /* Remove the padding */
    --tc-border-color: transparent; /* Remove the border */
    --tc-background-color: transparent; /* Make background transparent */
  }

  /* Twitter embed customization */
  .twitter-tweet {
    margin: 1.5rem auto !important;
    max-width: 550px !important;
    background-color: transparent !important;
  }
  
  /* Force dark theme for Twitter embeds */
  .twitter-tweet-rendered {
    background-color: transparent !important;
  }
  
  .twitter-tweet iframe {
    background-color: transparent !important;
  }

  @font-face {
    font-family: "CabinetGrotesk";
    src: url("/fonts/CabinetGrotesk-Variable.ttf") format("truetype-variations");
    font-weight: normal;
    font-style: normal;
    font-display: swap;
    font-weight: 100 1000;
  }
  @font-face {
    font-family: "Satoshi";
    src: url("/fonts/Satoshi-Variable.ttf") format("truetype-variations");
    font-weight: normal;
    font-style: normal;
    font-display: swap;
    font-weight: 100 1000;
  }

  /* Add Geist Mono Variable Font */
  @font-face {
    font-family: "Geist Mono";
    src: url("/fonts/webfonts/GeistMono[wght].woff2") format("woff2-variations"),
         url("/fonts/variable/GeistMono[wght].ttf") format("truetype-variations");
    font-weight: 100 900;
    font-style: normal;
    font-display: swap;
  }
  
  /* Fallback for browsers that don't support variable fonts */
  @font-face {
    font-family: "Geist Mono";
    src: url("/fonts/webfonts/GeistMono-Regular.woff2") format("woff2"),
         url("/fonts/ttf/GeistMono-Regular.ttf") format("truetype"),
         url("/fonts/otf/GeistMono-Regular.otf") format("opentype");
    font-weight: normal;
    font-style: normal;
    font-display: swap;
  }
  
  @font-face {
    font-family: "Geist Mono";
    src: url("/fonts/webfonts/GeistMono-Medium.woff2") format("woff2"),
         url("/fonts/ttf/GeistMono-Medium.ttf") format("truetype"),
         url("/fonts/otf/GeistMono-Medium.otf") format("opentype");
    font-weight: 500;
    font-style: normal;
    font-display: swap;
  }
  
  @font-face {
    font-family: "Geist Mono";
    src: url("/fonts/webfonts/GeistMono-Bold.woff2") format("woff2"),
         url("/fonts/ttf/GeistMono-Bold.ttf") format("truetype"),
         url("/fonts/otf/GeistMono-Bold.otf") format("opentype");
    font-weight: bold;
    font-style: normal;
    font-display: swap;
  }

  body {
    margin: 0;
    font-family: "Satoshi", sans-serif;
    -webkit-font-smoothing: antialiased;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: "CabinetGrotesk", sans-serif;
  }
  p {
    font-family: "Satoshi";
  }

  b {
    font-weight: 700 !important;
  }
  
  /* Add styling for code and pre elements */
  code, pre, .code {
    font-family: "Geist Mono", monospace;
  }

  /* Custom scrollbar */
  *::-webkit-scrollbar {
    width: 15px;
    background: #0a0a0a;
  }
  
  *::-webkit-scrollbar-thumb {
    background-color: #222;
    border-radius: 3px;
  }

  /* Add this to ensure content in blog posts uses Geist Mono */
  .content p, 
  .content li,
  .content blockquote,
  .content div {
    font-family: "Geist Mono", monospace !important;
  }
</style>